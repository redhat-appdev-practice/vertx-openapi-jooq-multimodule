---
openapi: 3.0.2
info:
  title: Todo
  version: 1.0.0
  description: My Todo list API
  contact:
    url: "http://localhost:8080/api/v1"
    email: deven.phillips@redhat.com
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0"
servers:
  - url: "http://{domain}:{port}/api/v1"
    description: "Local Dev"
    variables:
      domain:
        default: localhost
      port:
        default: '8080'
tags:
  - name: todos
  - name: user
paths:
  /todos:
    summary: Path used to manage the list of todos.
    description: >-
      The REST endpoint/path used to list and create zero or more `Todo` entities.  This path contains a
      `GET` and `POST` operation to perform the list and create tasks, respectively.
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Todo"
          description: Successful response - returns an array of `Todo` entities.
        default:
          $ref: "#/components/responses/Error"
      operationId: gettodos
      x-vertx-event-bus: api.todos
      tags:
        - todos
      summary: List All todos
      description: Gets a list of all `Todo` entities.
    post:
      requestBody:
        description: A new `Todo` to be created.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Todo"
        required: true
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        default:
          $ref: "#/components/responses/Error"
      operationId: createTodo
      x-vertx-event-bus: api.todos
      tags:
        - todos
      summary: Create a Todo
      description: Creates a new instance of a `Todo`.
  "/todos/{todoId}":
    summary: Path used to manage a single Todo.
    description: >-
      The REST endpoint/path used to get, update, and delete single instances of an `Todo`.  This path
      contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks,
      respectively.
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
          description: Successful response - returns a single `Todo`.
        default:
          $ref: "#/components/responses/Error"
      security:
        - KeyCloak: []
      operationId: getTodo
      x-vertx-event-bus: api.todos
      tags:
        - todos
      summary: Get a Todo
      description: Gets the details of a single instance of a `Todo`.
    put:
      requestBody:
        description: Updated `Todo` information.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Todo"
        required: true
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        default:
          $ref: "#/components/responses/Error"
      operationId: updateTodo
      x-vertx-event-bus: api.todos
      tags:
        - todos
      summary: Update a Todo
      description: Updates an existing `Todo`.
    delete:
      responses:
        "204":
          description: Successful response.
        default:
          $ref: "#/components/responses/Error"
      operationId: deleteTodo
      x-vertx-event-bus: api.todos
      tags:
        - todos
      summary: Delete a Todo
      description: Deletes an existing `Todo`.
    parameters:
      - name: todoId
        description: A unique identifier for a `Todo`.
        schema:
          format: uuid
          type: string
        in: path
        required: true
  /user:
    summary: Get the currently logged on user's profile data
    description: Return user profile based on authenticated user's OAuth2 Access Token
    get:
      responses:
        "200":
          description: The user profile information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      operationId: getUserProfile
      x-vertx-event-bus: api.user
      description: Return the current user profile
      tags:
        - user
components:
  schemas:
    User:
      title: User
      description: User information
      properties:
        id:
          format: uuid
          type: string
          x-java-field-annotations:
            - '@javax.persistence.Id'
            - '@javax.persistence.GeneratedValue(generator = "UUID")'
            - '@javax.persistence.Column(name = "id", updatable = false, nullable = false, columnDefinition = "VARCHAR(40)")'
          x-mysql-schema:
            columnDefinition:
              colName: id
              colDataType: VARCHAR
              colDataTypeArguments:
                - argumentValue: 40
                  isString: false
                  hasMore: false
              colNotNull: true
              primaryKey: true
        family_name:
          type: string
          x-mysql-schema:
            columnDefinition:
              colName: family_name
              colDataType: VARCHAR
              colDataTypeArguments:
                - argumentValue: 128
                  isString: false
                  hasMore: false
              colNotNull: true
        given_name:
          type: string
          x-mysql-schema:
            columnDefinition:
              colName: given_name
              colDataType: VARCHAR
              colDataTypeArguments:
                - argumentValue: 128
                  isString: false
                  hasMore: false
              colNotNull: true
        name:
          type: string
          x-mysql-schema:
            columnDefinition:
              colName: name
              colDataType: VARCHAR
              colDataTypeArguments:
                - argumentValue: 128
                  isString: false
                  hasMore: false
              colNotNull: true
        preferred_username:
          type: string
          x-mysql-schema:
            columnDefinition:
              colName: preferred_username
              colDataType: VARCHAR
              colDataTypeArguments:
                - argumentValue: 128
                  isString: false
                  hasMore: false
              colNotNull: true
      x-java-class-annotations:
        - "@javax.persistence.Entity"
        - '@javax.persistence.Table(name = "users")'
      x-mysql-schema:
        tableDefinition:
          tblName: users
          tblStorageEngine: InnoDB
    Todo:
      title: Todo
      description: A Todo list item
      required:
        - title
      type: object
      properties:
        id:
          format: uuid
          type: string
          x-java-field-annotations:
            - '@javax.persistence.Id'
            - '@javax.persistence.GeneratedValue(generator = "UUID")'
            - '@javax.persistence.Column(name = "id", updatable = false, nullable = false, columnDefinition = "VARCHAR(40)")'
          x-mysql-schema:
            columnDefinition:
              colName: id
              colDataType: VARCHAR
              colDataTypeArguments:
                - argumentValue: 40
                  isString: false
                  hasMore: false
              colNotNull: true
              primaryKey: true
        title:
          type: string
          x-mysql-schema:
            columnDefinition:
              colName: title
              colDataType: VARCHAR
              colDataTypeArguments:
                - argumentValue: 128
                  isString: false
                  hasMore: false
              colNotNull: false
        description:
          type: string
          x-java-field-annotations:
            - '@javax.persistence.Column(columnDefinition = "TEXT")'
          x-mysql-schema:
            columnDefinition:
              colName: description
              colDataType: TEXT
              colNotNull: false
        created:
          format: date-time
          type: string
          readOnly: true
          x-java-field-annotations:
            - '@javax.persistence.Column(name = "created", updatable = false, columnDefinition = "TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()")'
          x-mysql-schema:
            columnDefinition:
              colName: created
              colDataType: TIMESTAMP WITH TIME ZONE
              colNotNull: true
              colDefault:
                defaultValue: CURRENT_TIMESTAMP
                isString: false
                isNumeric: false
                isKeyword: true
        due_date:
          format: date-time
          type: string
          x-java-field-annotations:
            - '@javax.persistence.Column(name = "due_date", columnDefinition = "TIMESTAMP WITH TIME ZONE")'
          x-mysql-schema:
            columnDefinition:
              colName: due_date
              colDataType: TIMESTAMP WITH TIME ZONE
              colNotNull: false
        complete:
          type: boolean
          x-mysql-schema:
            columnDefinition:
              colName: complete
              colDataType: BOOLEAN
              colNotNull: true
              colDefault:
                defaultValue: false
                isString: false
                isNumeric: false
                isKeyword: true
        author:
          type: string
          readOnly: true
          x-mysql-schema:
            columnDefinition:
              colName: author
              colDataType: VARCHAR
              colDataTypeArguments:
                - argumentValue: 128
                  isString: false
                  hasMore: false
              colNotNull: false
      example:
        id: ec3b48dc-938d-11ea-8877-c7ea413b00cb
        title: Example Todo
        description: This is a Todo entity with a description
        created: "2020-05-14T09:00:00.000Z"
        due_date: "2020-05-20T09:00:00.000Z"
        complete: false
      x-java-class-annotations:
        - "@javax.persistence.Entity"
        - '@javax.persistence.Table(name = "todos")'
      x-mysql-schema:
        tableDefinition:
          tblName: todos
          tblStorageEngine: InnoDB
    Error:
      type: object
      properties:
        error:
          type: string
  responses:
    Error:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    KeyCloak:
      openIdConnectUrl: "http://todo:8080/auth/realms/todo/.well-known/openid-configuration"
      type: openIdConnect
security:
  - KeyCloak:
      - user
      - admin
