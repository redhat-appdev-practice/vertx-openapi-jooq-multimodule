<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.redhat.runtimes.vertx.data</groupId>
    <artifactId>openapi-vertx-todo-data-access</artifactId>
    <packaging>jar</packaging>
    <name>openapi-vertx-todo-data-access</name>
    <version>0.0.1-SNAPSHOT</version>
    <parent>
        <groupId>com.redhat.runtimes.vertx</groupId>
        <artifactId>openapi-vertx-todo</artifactId>
        <relativePath>../../pom.xml</relativePath>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    
    <properties>
        <jooq.version>3.15.3</jooq.version>
        <vertx.jooq.version>6.3.0</vertx.jooq.version>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>com.redhat.runtimes.vertx.models</groupId>
            <artifactId>openapi-vertx-todo-models</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>io.github.jklingsporn</groupId>
            <artifactId>vertx-jooq-classic-reactive</artifactId>
            <version>${vertx.jooq.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.32</version>
        </dependency>
        <dependency>
            <groupId>com.redhat.runtimes.vertx.data</groupId>
            <artifactId>openapi-vertx-todo-converters</artifactId>
            <version>${project.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <artifactId>openapi-generator-maven-plugin</artifactId>
                <groupId>org.openapitools</groupId>
                <version>5.2.0</version>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <generatorName>mysql-schema</generatorName>
                            <output>${project.build.directory}/schema/</output>
                            <skipOverwrite>false</skipOverwrite>
                            <inputSpec>${project.basedir}/../api/src/main/resources/openapi.yml</inputSpec>
                            <generateSupportingFiles>false</generateSupportingFiles>
                            <generateModels>false</generateModels>
                            <generateApis>false</generateApis>
                            <generateAliasAsModel>false</generateAliasAsModel>
                            <generateApiDocumentation>true</generateApiDocumentation>
                            <generateModelDocumentation>false</generateModelDocumentation>
                            <generateModelTests>false</generateModelTests>
                            <templateDirectory>${project.basedir}/src/main/templates</templateDirectory>
                            <configOptions>
                                <identifierNamingConvention>snake_case</identifierNamingConvention>
                            </configOptions>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>
                <version>${jooq.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>org.jooq</groupId>
                        <artifactId>jooq-meta-extensions</artifactId>
                        <version>${jooq.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>io.github.jklingsporn</groupId>
                        <artifactId>vertx-jooq-generate</artifactId>
                        <version>${vertx.jooq.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>com.redhat.runtimes.vertx.data</groupId>
                        <artifactId>openapi-vertx-todo-converters</artifactId>
                        <version>${project.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <generator>
                        <name>io.github.jklingsporn.vertx.jooq.generate.classic.ClassicReactiveVertxGenerator</name>
                        <database>
                            <name>org.jooq.meta.extensions.ddl.DDLDatabase</name>
                            <properties>
                        
                                <!-- Specify the location of your SQL script.
                                     You may use ant-style file matching, e.g. /path/**/to/*.sql
                                     
                                     Where:
                                     - ** matches any directory subtree
                                     - * matches any number of characters in a directory / file name
                                     - ? matches a single character in a directory / file name -->
                                <property>
                                    <key>scripts</key>
                                    <value>${project.build.directory}/schema/*.sql</value>
                                </property>
                                
                                <property>
                                    <key>parseDialect</key>
                                    <value>POSTGRESQL</value>
                                </property>
                                
                                <property>
                                    <key>parseWithMetaLookups</key>
                                    <value>true</value>
                                </property>
    
                                <property>
                                    <key>parseUnknownFunctions</key>
                                    <value>IGNORE</value>
                                </property>
    
                                <property>
                                    <key>parseIgnoreComments</key>
                                    <value>true</value>
                                </property>
                        
                                <!-- The sort order of the scripts within a directory, where:
                                
                                     - semantic: sorts versions, e.g. v-3.10.0 is after v-3.9.0 (default)
                                     - alphanumeric: sorts strings, e.g. v-3.10.0 is before v-3.9.0
                                     - flyway: sorts files the same way as flyway does
                                     - none: doesn't sort directory contents after fetching them from the directory -->
                                <property>
                                    <key>sort</key>
                                    <value>semantic</value>
                                </property>
                        
                                <!-- The default schema for unqualified objects:
                        
                                     - public: all unqualified objects are located in the PUBLIC (upper case) schema
                                     - none: all unqualified objects are located in the default schema (default)
                                     
                                     This configuration can be overridden with the schema mapping feature -->
                                <property>
                                    <key>unqualifiedSchema</key>
                                    <value>none</value>
                                </property>
                        
                                <!-- The default name case for unquoted objects:
                                
                                     - as_is: unquoted object names are kept unquoted
                                     - upper: unquoted object names are turned into upper case (most databases)
                                     - lower: unquoted object names are turned into lower case (e.g. PostgreSQL) -->
                                <property>
                                    <key>defaultNameCase</key>
                                    <value>as_is</value>
                                </property>
                            </properties>
                            <regexFlags>UNIX_LINES,DOTALL,CASE_INSENSITIVE</regexFlags>
                            <forcedTypes>
                                <forcedType>
                                    <userType>java.util.UUID</userType>
                                    <objectType>COLUMN</objectType>
                                    <converter>com.redhat.runtimes.data.access.converters.UUIDConverter</converter>
                                    <includeTypes>.*VARCHAR\(40\).*</includeTypes>
                                    <includeExpression>.*</includeExpression>
                                </forcedType>
<!--                                <forcedType>
                                    <userType>java.time.Instant</userType>
                                    <objectType>COLUMN</objectType>
                                    <converter>com.redhat.runtimes.data.access.converters.DateTimeConverter</converter>
                                    <includeTypes>.*IMESTAMP.*</includeTypes>
                                    <nullability>ALL</nullability>
                                    <includeExpression>.*</includeExpression>
                                </forcedType>-->
                            </forcedTypes>
                        </database>
                        <target>
                            <packageName>com.redhat.runtimes.data.access</packageName>
                            <encoding>UTF-8</encoding>
                            <clean>true</clean>
                        </target>
                        <generate>
                            <interfaces>true</interfaces>
                            <daos>true</daos>
                            <fluentSetters>true</fluentSetters>
                            <generatedAnnotation>true</generatedAnnotation>
                            <generatedAnnotationType>DETECT_FROM_JDK</generatedAnnotationType>
                            <generatedAnnotationDate>true</generatedAnnotationDate>
                        </generate>
                        <strategy>
                            <name>io.github.jklingsporn.vertx.jooq.generate.VertxGeneratorStrategy</name>
                        </strategy>
                    </generator>
                </configuration>
                <executions>
                    <execution>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
